{"ast":null,"code":"import _slicedToArray from\"/Users/csoutter/Documents/COMP 580/escape580/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useLayoutEffect,useEffect,useCallback,useState}from'react';import Sound from'react-sound';import'../levels.css';import sphinxInstructions from'../audio/sphinx/level4.mov';import level4announce from'../audio/sphinx/level4announce.mp3';import hiss from\"../audio/sphinx/hiss.mp3\";import snake from\"../audio/sphinx/snakepit.wav\";import spacebar from\"../audio/sphinx/spacebar.m4a\";function RenderReply(props){return React.createElement(React.Fragment,null,React.createElement(Sound,{url:props.reply,playStatus:Sound.status.PLAYING,autoLoad:true,loop:false,volume:100}));}export function Sphinx(props){var handleViewChange=props.handleViewChange===undefined?null:props.handleViewChange;var finishedinstructions=function finishedinstructions(){setSound(React.createElement(React.Fragment,null,React.createElement(Sound,{url:spacebar,playStatus:Sound.status.PLAYING// onFinishedPlaying={finishedspace}\n,autoLoad:true,loop:false,volume:100,playbackRate:\".8\"}),React.createElement(Sound,{url:snake,playStatus:Sound.status.PLAYING,autoLoad:true,loop:true,volume:100,playbackRate:\".8\"})));};// const finishedspace = () => {\n//     setSound(<Sound\n//       url={snake}\n//       playStatus={Sound.status.PLAYING}\n//       autoLoad={true}\n//       loop={true}\n//       volume={100}\n//       playbackRate='.8'\n//     />);\n//     }\nvar intro=React.createElement(React.Fragment,null,React.createElement(Sound,{url:sphinxInstructions,playStatus:Sound.status.PLAYING,onFinishedPlaying:finishedinstructions,autoLoad:true,loop:false,playbackRate:\".7\",volume:100}),React.createElement(Sound,{url:snake,playStatus:Sound.status.PLAYING,autoLoad:true,loop:true,volume:\"40\"}),React.createElement(Sound,{url:hiss,playStatus:Sound.status.PLAYING,autoLoad:true,loop:false,volume:\"80\"}));var _useState=useState(intro),_useState2=_slicedToArray(_useState,2),sound=_useState2[0],setSound=_useState2[1];var handleSpace=function handleSpace(){handleViewChange('riddle');};var handleKey=useCallback(function(e){var event=window.event?window.event:e;console.log(event);switch(e.key){case\" \":handleSpace();break;case\"Escape\":props.exit();}},[props]);useLayoutEffect(function(){document.addEventListener(\"keydown\",handleKey);return function cleanup(){document.removeEventListener(\"keydown\",handleKey);};});return React.createElement(\"div\",{id:\"sphinx-image\"},React.createElement(\"div\",{id:\"d-landing\"},React.createElement(\"h\",{id:\"h-entrance\"},\"Welcome to Level Four\"),React.createElement(\"p\",{id:\"p-landing\"},\"You are very near your goal. The quickest way is past me, a powerful sphinx. I will not move, no, not unless you can answer my riddle. Answer on your first guess \\u2014 I let you pass. Answer wrongly \\u2014 I attack. Remain silent \\u2014 I will let you walk away from me unscathed. Press the spacebar to hear the riddle\"),React.createElement(\"div\",{id:\"d-button-holder\"}),sound,sound));}// // import React, {useLayoutEffect, useEffect, useCallback, useState} from 'react';\n// // // import sphinxInstructions from '../audio/sphinx/level4.mov';\n// // // import level4announce from '../audio/sphinx/level4announce.mp3'\n// // // import hiss from \"../audio/sphinx/hiss.mp3\";\n// // // import snake from \"../audio/sphinx/snakepit.wav\";\n// // // import spacebar from \"../audio/sphinx/spacebar.m4a\";\n// // import Sound from 'react-sound';\n// function RenderReply(props) {\n//     return (\n//         <React.Fragment>\n//              <Sound\n//                url={props.reply}\n//                playStatus={Sound.status.PLAYING}\n//                autoLoad={true}\n//                loop={false}\n//                volume={100}\n//               />\n//         </React.Fragment>\n//     );\n// }\n// export function Sphinx(props) {\n//     const handleExitClick = () => {\n//         props.exit();\n//     }\n//     const finishedinstructions = () => {\n//         setSound(<RenderReply reply={spacebar}/>);\n//       }\n//     const intro = <React.Fragment>\n//                     <Sound\n//                            url={snake}\n//                            playStatus={Sound.status.PLAYING}\n//                            autoLoad={true}\n//                            loop={true}\n//                            volume=\"40\"\n//                        />\n//                        <Sound\n//                            url={hiss}\n//                            playStatus={Sound.status.PLAYING}\n//                            autoLoad={true}\n//                            loop={false}\n//                            volume=\"10\"\n//                        />\n//                        <Sound\n//                            url={sphinxInstructions}\n//                            playStatus={Sound.status.PLAYING}\n//                            onFinishedPlaying={finishedinstructions}\n//                            autoLoad={true}\n//                            loop={false}\n//                            volume=\"100\"\n//                            pitch=\"high\"\n//                            playbackRate=\".8\"\n//                        />\n//                     </React.Fragment>;\n//     const handleViewChange = props.handleViewChange === undefined ? null : props.handleViewChange;\n//     const[sound, setSound] = useState(intro);\n//       const handleKey = useCallback((e) => {\n//            var event = window.event ? window.event : e;\n//               console.log(event);\n//            switch(e.key) {\n//            case \" \":\n//                 handleViewChange('riddle');\n//                 break;\n//            case \"Escape\":\n//                 props.exit();\n//            }\n//       }, [props]);\n//      useLayoutEffect(() => {\n//          document.addEventListener(\"keydown\", handleKey);\n//                return function cleanup() {\n//                document.removeEventListener(\"keydown\", handleKey);\n//              };\n//        });\n//     return (\n//       <div id=\"sphinx-image\">\n//       <div id=\"d-landing\">\n//                   <h id=\"h-entrance\" >\n//                         Welcome to Level Four\n//                   </h>\n//                   <p id=\"p-landing\">\n//                   You are very near your goal. The quickest way is past me, a powerful sphinx.\n//                    I will not move, no, not unless you can answer my riddle. \n//                    Answer on your first guess — I let you pass. Answer wrongly — I attack. \n//                    Remain silent — I will let you walk away from me unscathed. \n//                    Press the spacebar to hear the riddle\n//                   </p>\n//                   <div id=\"d-button-holder\">\n//                   <button id=\"b-landing\">\n//                         Next\n//                         </button>\n//                         <button id=\"b-landing\" onClick={handleExitClick}>\n//                          Exit Maze\n//                         </button>\n//                    </div>\n//           </div>\n//         </div>\n//     );\n// }","map":{"version":3,"sources":["/Users/csoutter/Documents/COMP 580/escape580/src/components/sphinx.js"],"names":["React","useLayoutEffect","useEffect","useCallback","useState","Sound","sphinxInstructions","level4announce","hiss","snake","spacebar","RenderReply","props","reply","status","PLAYING","Sphinx","handleViewChange","undefined","finishedinstructions","setSound","intro","sound","handleSpace","handleKey","e","event","window","console","log","key","exit","document","addEventListener","cleanup","removeEventListener"],"mappings":"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ACI,4BAAK,EAAE,CAAC,cAAR,EACA,2BAAK,EAAE,CAAC,WAAR,EACY,yBAAG,EAAE,CAAC,YAAN,0BADZ,CAIY,yBAAG,EAAE,CAAC,WAAN,oUAJZ,CAWY,2BAAK,EAAE,CAAC,iBAAR,EAXZ,CAacF,KAbd,CAccA,KAdd,CADA,CADJ,CAqBH,CAaD;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import React, {useLayoutEffect, useEffect, useCallback, useState} from 'react';\nimport Sound from 'react-sound';\nimport '../levels.css';\nimport sphinxInstructions from '../audio/sphinx/level4.mov';\nimport level4announce from '../audio/sphinx/level4announce.mp3'\nimport hiss from \"../audio/sphinx/hiss.mp3\";\nimport snake from \"../audio/sphinx/snakepit.wav\";\nimport spacebar from \"../audio/sphinx/spacebar.m4a\";\n\n\nfunction RenderReply(props) {\n    return (\n        <React.Fragment>\n             <Sound\n               url={props.reply}\n               playStatus={Sound.status.PLAYING}\n               autoLoad={true}\n               loop={false}\n               volume={100}\n              />\n        </React.Fragment>\n    );\n}\n\nexport function Sphinx(props) {\n\n    const handleViewChange = props.handleViewChange === undefined ? null : props.handleViewChange;\n    const finishedinstructions = () => {\n      setSound(<React.Fragment><Sound\n        url={spacebar}\n        playStatus={Sound.status.PLAYING}\n        // onFinishedPlaying={finishedspace}\n        autoLoad={true}\n        loop={false}\n        volume={100}\n        playbackRate='.8'/>\n        <Sound\n          url={snake}\n          playStatus={Sound.status.PLAYING}\n          autoLoad={true}\n          loop={true}\n          volume={100}\n          playbackRate='.8'\n        /></React.Fragment>);\n      \n    }\n\n    // const finishedspace = () => {\n    //     setSound(<Sound\n    //       url={snake}\n    //       playStatus={Sound.status.PLAYING}\n    //       autoLoad={true}\n    //       loop={true}\n    //       volume={100}\n    //       playbackRate='.8'\n    //     />);\n    //     }\n\n    const intro = <React.Fragment>\n                    <Sound\n                    url={sphinxInstructions}\n                    playStatus={Sound.status.PLAYING}\n                    onFinishedPlaying={finishedinstructions}\n                    autoLoad={true}\n                    loop={false}\n                    playbackRate=\".7\"\n                    volume={100} />\n                    <Sound\n                           url={snake}\n                           playStatus={Sound.status.PLAYING}\n                           autoLoad={true}\n                           loop={true}\n                           volume=\"40\"\n                       />\n                       <Sound\n                           url={hiss}\n                           playStatus={Sound.status.PLAYING}\n                           autoLoad={true}\n                           loop={false}\n                           volume=\"80\"\n                       />\n                    </React.Fragment>;\n\n    const[sound, setSound] = useState(intro);\n    \n\n    const handleSpace = () => {\n        handleViewChange('riddle');\n    }\n\n\n      const handleKey = useCallback((e) => {\n           var event = window.event ? window.event : e;\n              console.log(event);\n           switch(e.key) {\n           case \" \":\n           handleSpace();\n           break;\n           case \"Escape\":\n           props.exit();\n           }\n      }, [props]);\n\n     useLayoutEffect(() => {\n         document.addEventListener(\"keydown\", handleKey);\n               return function cleanup() {\n               document.removeEventListener(\"keydown\", handleKey);\n             };\n       });\n\n    return (\n        <div id=\"sphinx-image\">\n        <div id=\"d-landing\">\n                    <h id=\"h-entrance\" >\n                          Welcome to Level Four\n                    </h>\n                    <p id=\"p-landing\">\n                    You are very near your goal. The quickest way is past me, a powerful sphinx.\n                     I will not move, no, not unless you can answer my riddle. \n                     Answer on your first guess — I let you pass. Answer wrongly — I attack. \n                     Remain silent — I will let you walk away from me unscathed. \n                     Press the spacebar to hear the riddle\n                    </p>\n                    <div id=\"d-button-holder\">\n                     </div>\n                     {sound}\n                     {sound}\n                         \n            </div>\n          </div>\n    );\n}\n\n\n\n\n\n\n\n\n\n\n\n\n// // import React, {useLayoutEffect, useEffect, useCallback, useState} from 'react';\n// // // import sphinxInstructions from '../audio/sphinx/level4.mov';\n// // // import level4announce from '../audio/sphinx/level4announce.mp3'\n// // // import hiss from \"../audio/sphinx/hiss.mp3\";\n// // // import snake from \"../audio/sphinx/snakepit.wav\";\n// // // import spacebar from \"../audio/sphinx/spacebar.m4a\";\n// // import Sound from 'react-sound';\n\n\n// function RenderReply(props) {\n//     return (\n//         <React.Fragment>\n//              <Sound\n//                url={props.reply}\n//                playStatus={Sound.status.PLAYING}\n//                autoLoad={true}\n//                loop={false}\n//                volume={100}\n//               />\n//         </React.Fragment>\n//     );\n// }\n\n\n// export function Sphinx(props) {\n    \n\n//     const handleExitClick = () => {\n//         props.exit();\n//     }\n//     const finishedinstructions = () => {\n//         setSound(<RenderReply reply={spacebar}/>);\n        \n//       }\n//     const intro = <React.Fragment>\n//                     <Sound\n//                            url={snake}\n//                            playStatus={Sound.status.PLAYING}\n//                            autoLoad={true}\n//                            loop={true}\n//                            volume=\"40\"\n//                        />\n//                        <Sound\n//                            url={hiss}\n//                            playStatus={Sound.status.PLAYING}\n//                            autoLoad={true}\n//                            loop={false}\n//                            volume=\"10\"\n//                        />\n//                        <Sound\n//                            url={sphinxInstructions}\n//                            playStatus={Sound.status.PLAYING}\n//                            onFinishedPlaying={finishedinstructions}\n//                            autoLoad={true}\n//                            loop={false}\n//                            volume=\"100\"\n//                            pitch=\"high\"\n//                            playbackRate=\".8\"\n//                        />\n//                     </React.Fragment>;\n  \n\n//     const handleViewChange = props.handleViewChange === undefined ? null : props.handleViewChange;\n//     const[sound, setSound] = useState(intro);\n\n//       const handleKey = useCallback((e) => {\n//            var event = window.event ? window.event : e;\n//               console.log(event);\n//            switch(e.key) {\n//            case \" \":\n//                 handleViewChange('riddle');\n//                 break;\n//            case \"Escape\":\n//                 props.exit();\n//            }\n//       }, [props]);\n\n      \n//      useLayoutEffect(() => {\n//          document.addEventListener(\"keydown\", handleKey);\n//                return function cleanup() {\n//                document.removeEventListener(\"keydown\", handleKey);\n//              };\n//        });\n\n\n//     return (\n//       <div id=\"sphinx-image\">\n//       <div id=\"d-landing\">\n//                   <h id=\"h-entrance\" >\n//                         Welcome to Level Four\n//                   </h>\n//                   <p id=\"p-landing\">\n//                   You are very near your goal. The quickest way is past me, a powerful sphinx.\n//                    I will not move, no, not unless you can answer my riddle. \n//                    Answer on your first guess — I let you pass. Answer wrongly — I attack. \n//                    Remain silent — I will let you walk away from me unscathed. \n//                    Press the spacebar to hear the riddle\n//                   </p>\n//                   <div id=\"d-button-holder\">\n//                   <button id=\"b-landing\">\n//                         Next\n//                         </button>\n//                         <button id=\"b-landing\" onClick={handleExitClick}>\n//                          Exit Maze\n//                         </button>\n//                    </div>\n                       \n//           </div>\n//         </div>\n//     );\n// }"]},"metadata":{},"sourceType":"module"}