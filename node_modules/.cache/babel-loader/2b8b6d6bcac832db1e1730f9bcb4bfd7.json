{"ast":null,"code":"var _jsxFileName = \"/Users/csoutter/Documents/COMP 580/escape580/escape580/src/components/sphinx.js\";\nimport React, { useLayoutEffect, useEffect, useCallback, useState } from 'react';\nimport Sound from 'react-sound';\nimport '../levels.css';\nimport sphinxInstructions from '../audio/sphinx/level4.mov';\nimport level4announce from '../audio/sphinx/level4announce.mp3';\nimport hiss from \"../audio/sphinx/hiss.mp3\";\nimport snake from \"../audio/sphinx/snakepit.wav\";\nimport spacebar from \"../audio/sphinx/spacebar.m4a\";\n\nfunction RenderReply(props) {\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(Sound, {\n    url: props.reply,\n    playStatus: Sound.status.PLAYING,\n    autoLoad: true,\n    loop: false,\n    volume: 100,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }));\n}\n\nexport function Sphinx(props) {\n  const handleViewChange = props.handleViewChange === undefined ? null : props.handleViewChange;\n\n  const finishedinstructions = () => {\n    setSound(React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(Sound, {\n      url: spacebar,\n      playStatus: Sound.status.PLAYING // onFinishedPlaying={finishedspace}\n      ,\n      autoLoad: true,\n      loop: false,\n      volume: 100,\n      playbackRate: \".8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }), React.createElement(Sound, {\n      url: snake,\n      playStatus: Sound.status.PLAYING,\n      autoLoad: true,\n      loop: true,\n      volume: 100,\n      playbackRate: \".8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    })));\n  }; // const finishedspace = () => {\n  //     setSound(<Sound\n  //       url={snake}\n  //       playStatus={Sound.status.PLAYING}\n  //       autoLoad={true}\n  //       loop={true}\n  //       volume={100}\n  //       playbackRate='.8'\n  //     />);\n  //     }\n\n\n  const intro = React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(Sound, {\n    url: sphinxInstructions,\n    playStatus: Sound.status.PLAYING,\n    onFinishedPlaying: finishedinstructions,\n    autoLoad: true,\n    loop: false,\n    playbackRate: \".7\",\n    volume: 100,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), React.createElement(Sound, {\n    url: snake,\n    playStatus: Sound.status.PLAYING,\n    autoLoad: true,\n    loop: true,\n    volume: \"40\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(Sound, {\n    url: hiss,\n    playStatus: Sound.status.PLAYING,\n    autoLoad: true,\n    loop: false,\n    volume: \"80\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }));\n  const [sound, setSound] = useState(intro);\n\n  const handleSpace = () => {\n    handleViewChange('riddle');\n  };\n\n  const handleKey = useCallback(e => {\n    var event = window.event ? window.event : e;\n    console.log(event);\n\n    switch (e.key) {\n      case \" \":\n        handleSpace();\n        break;\n\n      case \"Escape\":\n        props.exit();\n    }\n  }, [props]);\n  useLayoutEffect(() => {\n    document.addEventListener(\"keydown\", handleKey);\n    return function cleanup() {\n      document.removeEventListener(\"keydown\", handleKey);\n    };\n  });\n  return React.createElement(\"div\", {\n    id: \"sphinx-image\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"d-landing\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(\"h\", {\n    id: \"h-entrance\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"Welcome to Level Four\"), React.createElement(\"p\", {\n    id: \"p-landing\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"You are very near your goal. The quickest way is past me, a powerful sphinx. I will not move, no, not unless you can answer my riddle. Answer on your first guess \\u2014 I let you pass. Answer wrongly \\u2014 I attack. Remain silent \\u2014 I will let you walk away from me unscathed. Press the spacebar to hear the riddle\"), React.createElement(\"div\", {\n    id: \"d-button-holder\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }), sound, sound));\n} // // import React, {useLayoutEffect, useEffect, useCallback, useState} from 'react';\n// // // import sphinxInstructions from '../audio/sphinx/level4.mov';\n// // // import level4announce from '../audio/sphinx/level4announce.mp3'\n// // // import hiss from \"../audio/sphinx/hiss.mp3\";\n// // // import snake from \"../audio/sphinx/snakepit.wav\";\n// // // import spacebar from \"../audio/sphinx/spacebar.m4a\";\n// // import Sound from 'react-sound';\n// function RenderReply(props) {\n//     return (\n//         <React.Fragment>\n//              <Sound\n//                url={props.reply}\n//                playStatus={Sound.status.PLAYING}\n//                autoLoad={true}\n//                loop={false}\n//                volume={100}\n//               />\n//         </React.Fragment>\n//     );\n// }\n// export function Sphinx(props) {\n//     const handleExitClick = () => {\n//         props.exit();\n//     }\n//     const finishedinstructions = () => {\n//         setSound(<RenderReply reply={spacebar}/>);\n//       }\n//     const intro = <React.Fragment>\n//                     <Sound\n//                            url={snake}\n//                            playStatus={Sound.status.PLAYING}\n//                            autoLoad={true}\n//                            loop={true}\n//                            volume=\"40\"\n//                        />\n//                        <Sound\n//                            url={hiss}\n//                            playStatus={Sound.status.PLAYING}\n//                            autoLoad={true}\n//                            loop={false}\n//                            volume=\"10\"\n//                        />\n//                        <Sound\n//                            url={sphinxInstructions}\n//                            playStatus={Sound.status.PLAYING}\n//                            onFinishedPlaying={finishedinstructions}\n//                            autoLoad={true}\n//                            loop={false}\n//                            volume=\"100\"\n//                            pitch=\"high\"\n//                            playbackRate=\".8\"\n//                        />\n//                     </React.Fragment>;\n//     const handleViewChange = props.handleViewChange === undefined ? null : props.handleViewChange;\n//     const[sound, setSound] = useState(intro);\n//       const handleKey = useCallback((e) => {\n//            var event = window.event ? window.event : e;\n//               console.log(event);\n//            switch(e.key) {\n//            case \" \":\n//                 handleViewChange('riddle');\n//                 break;\n//            case \"Escape\":\n//                 props.exit();\n//            }\n//       }, [props]);\n//      useLayoutEffect(() => {\n//          document.addEventListener(\"keydown\", handleKey);\n//                return function cleanup() {\n//                document.removeEventListener(\"keydown\", handleKey);\n//              };\n//        });\n//     return (\n//       <div id=\"sphinx-image\">\n//       <div id=\"d-landing\">\n//                   <h id=\"h-entrance\" >\n//                         Welcome to Level Four\n//                   </h>\n//                   <p id=\"p-landing\">\n//                   You are very near your goal. The quickest way is past me, a powerful sphinx.\n//                    I will not move, no, not unless you can answer my riddle. \n//                    Answer on your first guess — I let you pass. Answer wrongly — I attack. \n//                    Remain silent — I will let you walk away from me unscathed. \n//                    Press the spacebar to hear the riddle\n//                   </p>\n//                   <div id=\"d-button-holder\">\n//                   <button id=\"b-landing\">\n//                         Next\n//                         </button>\n//                         <button id=\"b-landing\" onClick={handleExitClick}>\n//                          Exit Maze\n//                         </button>\n//                    </div>\n//           </div>\n//         </div>\n//     );\n// }","map":{"version":3,"sources":["/Users/csoutter/Documents/COMP 580/escape580/escape580/src/components/sphinx.js"],"names":["React","useLayoutEffect","useEffect","useCallback","useState","Sound","sphinxInstructions","level4announce","hiss","snake","spacebar","RenderReply","props","reply","status","PLAYING","Sphinx","handleViewChange","undefined","finishedinstructions","setSound","intro","sound","handleSpace","handleKey","e","event","window","console","log","key","exit","document","addEventListener","cleanup","removeEventListener"],"mappings":"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","sourcesContent":["import React, {useLayoutEffect, useEffect, useCallback, useState} from 'react';\nimport Sound from 'react-sound';\nimport '../levels.css';\nimport sphinxInstructions from '../audio/sphinx/level4.mov';\nimport level4announce from '../audio/sphinx/level4announce.mp3'\nimport hiss from \"../audio/sphinx/hiss.mp3\";\nimport snake from \"../audio/sphinx/snakepit.wav\";\nimport spacebar from \"../audio/sphinx/spacebar.m4a\";\n\n\nfunction RenderReply(props) {\n    return (\n        <React.Fragment>\n             <Sound\n               url={props.reply}\n               playStatus={Sound.status.PLAYING}\n               autoLoad={true}\n               loop={false}\n               volume={100}\n              />\n        </React.Fragment>\n    );\n}\n\nexport function Sphinx(props) {\n\n    const handleViewChange = props.handleViewChange === undefined ? null : props.handleViewChange;\n    const finishedinstructions = () => {\n      setSound(<React.Fragment><Sound\n        url={spacebar}\n        playStatus={Sound.status.PLAYING}\n        // onFinishedPlaying={finishedspace}\n        autoLoad={true}\n        loop={false}\n        volume={100}\n        playbackRate='.8'/>\n        <Sound\n          url={snake}\n          playStatus={Sound.status.PLAYING}\n          autoLoad={true}\n          loop={true}\n          volume={100}\n          playbackRate='.8'\n        /></React.Fragment>);\n      \n    }\n\n    // const finishedspace = () => {\n    //     setSound(<Sound\n    //       url={snake}\n    //       playStatus={Sound.status.PLAYING}\n    //       autoLoad={true}\n    //       loop={true}\n    //       volume={100}\n    //       playbackRate='.8'\n    //     />);\n    //     }\n\n    const intro = <React.Fragment>\n                    <Sound\n                    url={sphinxInstructions}\n                    playStatus={Sound.status.PLAYING}\n                    onFinishedPlaying={finishedinstructions}\n                    autoLoad={true}\n                    loop={false}\n                    playbackRate=\".7\"\n                    volume={100} />\n                    <Sound\n                           url={snake}\n                           playStatus={Sound.status.PLAYING}\n                           autoLoad={true}\n                           loop={true}\n                           volume=\"40\"\n                       />\n                       <Sound\n                           url={hiss}\n                           playStatus={Sound.status.PLAYING}\n                           autoLoad={true}\n                           loop={false}\n                           volume=\"80\"\n                       />\n                    </React.Fragment>;\n\n    const[sound, setSound] = useState(intro);\n    \n\n    const handleSpace = () => {\n        handleViewChange('riddle');\n    }\n\n\n      const handleKey = useCallback((e) => {\n           var event = window.event ? window.event : e;\n              console.log(event);\n           switch(e.key) {\n           case \" \":\n           handleSpace();\n           break;\n           case \"Escape\":\n           props.exit();\n           }\n      }, [props]);\n\n     useLayoutEffect(() => {\n         document.addEventListener(\"keydown\", handleKey);\n               return function cleanup() {\n               document.removeEventListener(\"keydown\", handleKey);\n             };\n       });\n\n    return (\n        <div id=\"sphinx-image\">\n        <div id=\"d-landing\">\n                    <h id=\"h-entrance\" >\n                          Welcome to Level Four\n                    </h>\n                    <p id=\"p-landing\">\n                    You are very near your goal. The quickest way is past me, a powerful sphinx.\n                     I will not move, no, not unless you can answer my riddle. \n                     Answer on your first guess — I let you pass. Answer wrongly — I attack. \n                     Remain silent — I will let you walk away from me unscathed. \n                     Press the spacebar to hear the riddle\n                    </p>\n                    <div id=\"d-button-holder\">\n                     </div>\n                     {sound}\n                     {sound}\n                         \n            </div>\n          </div>\n    );\n}\n\n\n\n\n\n\n\n\n\n\n\n\n// // import React, {useLayoutEffect, useEffect, useCallback, useState} from 'react';\n// // // import sphinxInstructions from '../audio/sphinx/level4.mov';\n// // // import level4announce from '../audio/sphinx/level4announce.mp3'\n// // // import hiss from \"../audio/sphinx/hiss.mp3\";\n// // // import snake from \"../audio/sphinx/snakepit.wav\";\n// // // import spacebar from \"../audio/sphinx/spacebar.m4a\";\n// // import Sound from 'react-sound';\n\n\n// function RenderReply(props) {\n//     return (\n//         <React.Fragment>\n//              <Sound\n//                url={props.reply}\n//                playStatus={Sound.status.PLAYING}\n//                autoLoad={true}\n//                loop={false}\n//                volume={100}\n//               />\n//         </React.Fragment>\n//     );\n// }\n\n\n// export function Sphinx(props) {\n    \n\n//     const handleExitClick = () => {\n//         props.exit();\n//     }\n//     const finishedinstructions = () => {\n//         setSound(<RenderReply reply={spacebar}/>);\n        \n//       }\n//     const intro = <React.Fragment>\n//                     <Sound\n//                            url={snake}\n//                            playStatus={Sound.status.PLAYING}\n//                            autoLoad={true}\n//                            loop={true}\n//                            volume=\"40\"\n//                        />\n//                        <Sound\n//                            url={hiss}\n//                            playStatus={Sound.status.PLAYING}\n//                            autoLoad={true}\n//                            loop={false}\n//                            volume=\"10\"\n//                        />\n//                        <Sound\n//                            url={sphinxInstructions}\n//                            playStatus={Sound.status.PLAYING}\n//                            onFinishedPlaying={finishedinstructions}\n//                            autoLoad={true}\n//                            loop={false}\n//                            volume=\"100\"\n//                            pitch=\"high\"\n//                            playbackRate=\".8\"\n//                        />\n//                     </React.Fragment>;\n  \n\n//     const handleViewChange = props.handleViewChange === undefined ? null : props.handleViewChange;\n//     const[sound, setSound] = useState(intro);\n\n//       const handleKey = useCallback((e) => {\n//            var event = window.event ? window.event : e;\n//               console.log(event);\n//            switch(e.key) {\n//            case \" \":\n//                 handleViewChange('riddle');\n//                 break;\n//            case \"Escape\":\n//                 props.exit();\n//            }\n//       }, [props]);\n\n      \n//      useLayoutEffect(() => {\n//          document.addEventListener(\"keydown\", handleKey);\n//                return function cleanup() {\n//                document.removeEventListener(\"keydown\", handleKey);\n//              };\n//        });\n\n\n//     return (\n//       <div id=\"sphinx-image\">\n//       <div id=\"d-landing\">\n//                   <h id=\"h-entrance\" >\n//                         Welcome to Level Four\n//                   </h>\n//                   <p id=\"p-landing\">\n//                   You are very near your goal. The quickest way is past me, a powerful sphinx.\n//                    I will not move, no, not unless you can answer my riddle. \n//                    Answer on your first guess — I let you pass. Answer wrongly — I attack. \n//                    Remain silent — I will let you walk away from me unscathed. \n//                    Press the spacebar to hear the riddle\n//                   </p>\n//                   <div id=\"d-button-holder\">\n//                   <button id=\"b-landing\">\n//                         Next\n//                         </button>\n//                         <button id=\"b-landing\" onClick={handleExitClick}>\n//                          Exit Maze\n//                         </button>\n//                    </div>\n                       \n//           </div>\n//         </div>\n//     );\n// }"]},"metadata":{},"sourceType":"module"}