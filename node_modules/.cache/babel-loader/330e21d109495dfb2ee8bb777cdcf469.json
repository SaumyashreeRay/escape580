{"ast":null,"code":"var _jsxFileName = \"/Users/csoutter/Documents/COMP 580/escape580/escape580/src/components/sphinx.js\";\nimport React, { useLayoutEffect, useEffect, useCallback } from 'react';\nimport sphinxInstructions from '../audio/level4.mp3';\nimport level4announce from '../audio/level4announce.mp3';\nimport hiss from \"../audio/hiss.mp3\";\nimport snake from \"../audio/snakepit.wav\";\nimport Sound from 'react-sound';\nexport function Sphinx(props) {\n  const handleExitClick = () => {\n    props.exit();\n  };\n\n  const handleViewChange = props.handleViewChange === undefined ? null : props.handleViewChange;\n  const handleKey = useCallback(e => {\n    var event = window.event ? window.event : e;\n    console.log(event);\n\n    switch (e.key) {\n      case \"ArrowRight\":\n        handleViewChange('riddle');\n        console.log(\"riddle\");\n        break;\n\n      case \"ArrowLeft\":\n        handleViewChange('enter');\n    }\n  }, [props]);\n  useLayoutEffect(() => {\n    document.addEventListener(\"keydown\", handleKey);\n    return function cleanup() {\n      document.removeEventListener(\"keydown\", handleKey);\n    };\n  });\n  return React.createElement(\"div\", {\n    id: \"sphinx-image\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"d-landing\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"h\", {\n    id: \"h-entrance\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Welcome to Level Four\"), React.createElement(\"p\", {\n    id: \"p-landing\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"You are very near your goal. The quickest way is past me, a powerful sphinx. I will not move, no, not unless you can answer my riddle. Answer on your first guess \\u2014 I let you pass. Answer wrongly \\u2014 I attack. Remain silent \\u2014 I will let you walk away from me unscathed. Press the right arrow to hear the riddle\"), React.createElement(\"div\", {\n    id: \"d-button-holder\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    id: \"b-landing\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Next\"), React.createElement(\"button\", {\n    id: \"b-landing\",\n    onClick: handleExitClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Exit Maze\")), React.createElement(Sound, {\n    url: snake,\n    playStatus: Sound.status.PLAYING,\n    autoLoad: true,\n    loop: true,\n    volume: \"40\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(Sound, {\n    url: hiss,\n    playStatus: Sound.status.PLAYING,\n    autoLoad: true,\n    loop: false,\n    volume: \"10\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(Sound, {\n    url: sphinxInstructions,\n    playStatus: Sound.status.PLAYING,\n    autoLoad: true,\n    loop: false,\n    volume: \"100\",\n    pitch: \"high\",\n    playbackRate: \".8\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/csoutter/Documents/COMP 580/escape580/escape580/src/components/sphinx.js"],"names":["React","useLayoutEffect","useEffect","useCallback","sphinxInstructions","level4announce","hiss","snake","Sound","Sphinx","props","handleExitClick","exit","handleViewChange","undefined","handleKey","e","event","window","console","log","key","document","addEventListener","cleanup","removeEventListener","status","PLAYING"],"mappings":"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","sourcesContent":["import React, {useLayoutEffect, useEffect, useCallback} from 'react';\nimport sphinxInstructions from '../audio/level4.mp3';\nimport level4announce from '../audio/level4announce.mp3'\nimport hiss from \"../audio/hiss.mp3\";\nimport snake from \"../audio/snakepit.wav\";\nimport Sound from 'react-sound';\n\n\nexport function Sphinx(props) {\n    \n\n    const handleExitClick = () => {\n        props.exit();\n    }\n    \n\n    const handleViewChange = props.handleViewChange === undefined ? null : props.handleViewChange;\n\n      const handleKey = useCallback((e) => {\n           var event = window.event ? window.event : e;\n              console.log(event);\n           switch(e.key) {\n           case \"ArrowRight\":\n              handleViewChange('riddle');\n           console.log(\"riddle\");\n           break;\n           case \"ArrowLeft\":\n           handleViewChange('enter');\n           }\n      }, [props]);\n\n     useLayoutEffect(() => {\n         document.addEventListener(\"keydown\", handleKey);\n               return function cleanup() {\n               document.removeEventListener(\"keydown\", handleKey);\n             };\n       });\n\n\n    return (\n      <div id=\"sphinx-image\">\n      <div id=\"d-landing\">\n                  <h id=\"h-entrance\" >\n                        Welcome to Level Four\n                  </h>\n                  <p id=\"p-landing\">\n                  You are very near your goal. The quickest way is past me, a powerful sphinx.\n                   I will not move, no, not unless you can answer my riddle. \n                   Answer on your first guess — I let you pass. Answer wrongly — I attack. \n                   Remain silent — I will let you walk away from me unscathed. \n                   Press the right arrow to hear the riddle\n                  </p>\n                  <div id=\"d-button-holder\">\n                  <button id=\"b-landing\">\n                        Next\n                        </button>\n                        <button id=\"b-landing\" onClick={handleExitClick}>\n                         Exit Maze\n                        </button>\n            </div>\n                        {/* <Sound\n                           url={level4announce}\n                           playStatus={Sound.status.PLAYING}\n                           autoLoad={true}\n                           loop={false}\n                           volume=\"100\"\n                       /> */}\n                       <Sound\n                           url={snake}\n                           playStatus={Sound.status.PLAYING}\n                           autoLoad={true}\n                           loop={true}\n                           volume=\"40\"\n                       />\n                       <Sound\n                           url={hiss}\n                           playStatus={Sound.status.PLAYING}\n                           autoLoad={true}\n                           loop={false}\n                           volume=\"10\"\n                       />\n                       <Sound\n                           url={sphinxInstructions}\n                           playStatus={Sound.status.PLAYING}\n                           autoLoad={true}\n                           loop={false}\n                           volume=\"100\"\n                           pitch=\"high\"\n                           playbackRate=\".8\"\n                       />\n          </div>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}