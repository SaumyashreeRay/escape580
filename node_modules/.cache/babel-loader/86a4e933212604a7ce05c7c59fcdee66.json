{"ast":null,"code":"var _jsxFileName = \"/Users/csoutter/Documents/COMP 580/escape580/escape580/src/components/boggart.js\";\nimport React, { useLayoutEffect, useEffect, useCallback } from 'react';\nimport Sound from 'react-sound';\nimport boggartInstructions from '../audio/level3.m4a';\nimport rattling from \"../audio/rattling.mp3\";\n\nfunction RenderReply(props) {\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, React.createElement(Sound, {\n    url: props.reply,\n    playStatus: Sound.status.PLAYING,\n    autoLoad: true,\n    loop: false,\n    volume: 100,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }));\n}\n\nexport function Boggart(props) {\n  const handleExitClick = () => {\n    props.exit();\n  };\n\n  const intro = React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(Sound, {\n    url: rattling,\n    playStatus: Sound.status.PLAYING,\n    autoLoad: true,\n    loop: false,\n    volume: 75,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), React.createElement(Sound, {\n    url: boggartInstructions,\n    playStatus: Sound.status.PLAYING,\n    autoLoad: true,\n    loop: true,\n    volume: 75,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }));\n  const handleViewChange = props.handleViewChange === undefined ? null : props.handleViewChange;\n  const [sound, setSound] = useState(intro);\n  const [correct, setCorrect] = useState(false);\n  /*const rain = <React.Fragment>\n                                <Sound\n                                   url={rain_spell}\n                                   playStatus={Sound.status.PLAYING}\n                                   autoLoad={true}\n                                   loop={false}\n                                   volume={75} />\n                                <Sound\n                                   url={rain_sound}\n                                   playStatus={Sound.status.PLAYING}\n                                   autoLoad={true}\n                                   loop={false}\n                                   volume={75} />\n                                 </React.Fragment>;\n   const explosion_comp =   <React.Fragment>\n                               <Sound\n                                  url={explosion_spell}\n                                  playStatus={Sound.status.PLAYING}\n                                  autoLoad={true}\n                                  loop={false}\n                                  volume={100} />\n                               <Sound\n                                  url={explosion}\n                                  playStatus={Sound.status.PLAYING}\n                                  autoLoad={true}\n                                  loop={false}\n                                  volume={25} />\n                                </React.Fragment>;\n   const sunlight = <React.Fragment>\n                     <Sound\n                        url={sunlight_spell}\n                        playStatus={Sound.status.PLAYING}\n                        autoLoad={true}\n                        loop={false}\n                        volume={100} />\n                   </React.Fragment>;\n   const scream = <React.Fragment>\n                      <Sound\n                         url={scream_spell}\n                         playStatus={Sound.status.PLAYING}\n                         autoLoad={true}\n                         loop={false}\n                         volume={100} />\n                      <Sound\n                         url={scream_sound}\n                         playStatus={Sound.status.PLAYING}\n                         autoLoad={true}\n                         loop={false}\n                         volume={25} />\n                  </React.Fragment>;\n   const handleRain = () => {\n      console.log(document.activeElement.id);\n     setSound(<RenderReply reply={rain_reply}/>);\n  }\n   const handleExplosion= () => {\n      setSound(<RenderReply reply={explosion_reply}/>);\n  }\n   const finishedLevel = () => {\n      handleViewChange('level-two');\n  }\n   const handleSunlight = () => {\n     setSound(<Sound\n                url={sunlight_reply}\n                playStatus={Sound.status.PLAYING}\n                autoLoad={true}\n                loop={false}\n                volume={100}\n                 onFinishedPlaying={finishedLevel}\n              />);\n  }\n   const handleScream = () => {\n      setSound(<RenderReply reply={scream_reply}/>);\n  }\n   const handleSpace = () => {\n     let id =  console.log(document.activeElement.id);\n     switch(id) {\n     case \"rain\":\n       handleRain();\n     break;\n     case \"sunlight\":\n     handleSunlight();\n     break;\n     case \"explosion\":\n     handleExplosion();\n     break;\n     case \"scream\":\n     handleScream();\n     break;\n     }\n  }\n   const handleSelect = (name) => {\n      console.log(name);\n      switch(name) {\n          case -1:\n          setSound(rain);\n          break;\n          case 1:\n          setSound(explosion_comp);\n          break;\n          case 2:\n          setSound(sunlight);\n          break;\n          case 3:\n          setSound(scream);\n          break;\n      }\n  }*/\n\n  const handleKey = useCallback(e => {\n    var event = window.event ? window.event : e;\n    console.log(event);\n\n    switch (e.key) {\n      case \"ArrowRight\":\n        handleViewChange('level-two');\n        break;\n\n      case \"ArrowLeft\":\n        handleViewChange('enter');\n        break;\n\n      case \"Tab\":\n        handleSelect(document.activeElement.tabIndex);\n        break;\n\n      case \" \":\n        handleSpace();\n        break;\n\n      case \"Escape\":\n        props.exit();\n    }\n  }, [props]);\n  useLayoutEffect(() => {\n    document.addEventListener(\"keydown\", handleKey);\n    return function cleanup() {\n      document.removeEventListener(\"keydown\", handleKey);\n    };\n  });\n  return React.createElement(\"div\", {\n    id: \"boggart-image\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"d-landing\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, React.createElement(\"h\", {\n    id: \"h-entrance\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, \"Welcome to level three!\"), React.createElement(\"p\", {\n    id: \"p-landing\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, \"Ah, you have encountered the boggart, a very mysterious creature! This creature knows all of your deepest, darkest fears and transforms into the thing that you are most afraid of. There is a special spell that you must use in order to defeat the boggart. Let\\u2019s see if you can figure out what spell to use\\u2026\"), React.createElement(\"div\", {\n    id: \"d-button-holder\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    id: \"b-landing\",\n    onClick: handleExitClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, \"Exit Maze\"))));\n}","map":{"version":3,"sources":["/Users/csoutter/Documents/COMP 580/escape580/escape580/src/components/boggart.js"],"names":["React","useLayoutEffect","useEffect","useCallback","Sound","boggartInstructions","rattling","RenderReply","props","reply","status","PLAYING","Boggart","handleExitClick","exit","intro","handleViewChange","undefined","sound","setSound","useState","correct","setCorrect","handleKey","e","event","window","console","log","key","handleSelect","document","activeElement","tabIndex","handleSpace","addEventListener","cleanup","removeEventListener"],"mappings":"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","sourcesContent":["import React, {useLayoutEffect, useEffect, useCallback} from 'react';\nimport Sound from 'react-sound';\nimport boggartInstructions from '../audio/level3.m4a';\nimport rattling from \"../audio/rattling.mp3\";\n\nfunction RenderReply(props) {\n    return (\n        <React.Fragment>\n             <Sound\n               url={props.reply}\n               playStatus={Sound.status.PLAYING}\n               autoLoad={true}\n               loop={false}\n               volume={100}\n              />\n        </React.Fragment>\n    );\n}\n\nexport function Boggart(props) {\n\n    const handleExitClick = () => {\n        props.exit();\n    }\n\n    const intro = <React.Fragment>\n      <Sound\n         url={rattling}\n         playStatus={Sound.status.PLAYING}\n         autoLoad={true}\n         loop={false}\n         volume={75}\n      />\n        <Sound\n          url={boggartInstructions}\n          playStatus={Sound.status.PLAYING}\n          autoLoad={true}\n          loop={true}\n         volume={75}\n         />\n                  </React.Fragment>;\n\n    const handleViewChange = props.handleViewChange === undefined ? null : props.handleViewChange;\n\n    const[sound, setSound] = useState(intro);\n    const[correct, setCorrect] = useState(false);\n\n    /*const rain = <React.Fragment>\n                                  <Sound\n                                     url={rain_spell}\n                                     playStatus={Sound.status.PLAYING}\n                                     autoLoad={true}\n                                     loop={false}\n                                     volume={75} />\n                                  <Sound\n                                     url={rain_sound}\n                                     playStatus={Sound.status.PLAYING}\n                                     autoLoad={true}\n                                     loop={false}\n                                     volume={75} />\n                                   </React.Fragment>;\n\n    const explosion_comp =   <React.Fragment>\n                                 <Sound\n                                    url={explosion_spell}\n                                    playStatus={Sound.status.PLAYING}\n                                    autoLoad={true}\n                                    loop={false}\n                                    volume={100} />\n                                 <Sound\n                                    url={explosion}\n                                    playStatus={Sound.status.PLAYING}\n                                    autoLoad={true}\n                                    loop={false}\n                                    volume={25} />\n                                  </React.Fragment>;\n\n    const sunlight = <React.Fragment>\n                       <Sound\n                          url={sunlight_spell}\n                          playStatus={Sound.status.PLAYING}\n                          autoLoad={true}\n                          loop={false}\n                          volume={100} />\n                     </React.Fragment>;\n\n    const scream = <React.Fragment>\n                        <Sound\n                           url={scream_spell}\n                           playStatus={Sound.status.PLAYING}\n                           autoLoad={true}\n                           loop={false}\n                           volume={100} />\n                        <Sound\n                           url={scream_sound}\n                           playStatus={Sound.status.PLAYING}\n                           autoLoad={true}\n                           loop={false}\n                           volume={25} />\n                    </React.Fragment>;\n\n    const handleRain = () => {\n        console.log(document.activeElement.id);\n       setSound(<RenderReply reply={rain_reply}/>);\n    }\n\n    const handleExplosion= () => {\n        setSound(<RenderReply reply={explosion_reply}/>);\n    }\n\n    const finishedLevel = () => {\n        handleViewChange('level-two');\n    }\n\n    const handleSunlight = () => {\n       setSound(<Sound\n                  url={sunlight_reply}\n                  playStatus={Sound.status.PLAYING}\n                  autoLoad={true}\n                  loop={false}\n                  volume={100}\n                   onFinishedPlaying={finishedLevel}\n                />);\n    }\n\n    const handleScream = () => {\n        setSound(<RenderReply reply={scream_reply}/>);\n    }\n\n    const handleSpace = () => {\n       let id =  console.log(document.activeElement.id);\n       switch(id) {\n       case \"rain\":\n         handleRain();\n       break;\n       case \"sunlight\":\n       handleSunlight();\n       break;\n       case \"explosion\":\n       handleExplosion();\n       break;\n       case \"scream\":\n       handleScream();\n       break;\n       }\n    }\n\n    const handleSelect = (name) => {\n        console.log(name);\n        switch(name) {\n            case -1:\n            setSound(rain);\n            break;\n            case 1:\n            setSound(explosion_comp);\n            break;\n            case 2:\n            setSound(sunlight);\n            break;\n            case 3:\n            setSound(scream);\n            break;\n        }\n    }*/\n\n      const handleKey = useCallback((e) => {\n           var event = window.event ? window.event : e;\n              console.log(event);\n           switch(e.key) {\n           case \"ArrowRight\":\n             handleViewChange('level-two');\n           break;\n           case \"ArrowLeft\":\n           handleViewChange('enter');\n           break;\n           case \"Tab\":\n           handleSelect(document.activeElement.tabIndex)\n           break;\n           case \" \":\n           handleSpace();\n           break;\n           case \"Escape\":\n           props.exit();\n           }\n      }, [props]);\n\n     useLayoutEffect(() => {\n         document.addEventListener(\"keydown\", handleKey);\n               return function cleanup() {\n               document.removeEventListener(\"keydown\", handleKey);\n             };\n       });\n\n\n    return (\n      <div id=\"boggart-image\">\n        <div id=\"d-landing\">\n                  <h id=\"h-entrance\" >\n                        Welcome to level three!\n                  </h>\n                  <p id=\"p-landing\">\n                  Ah, you have encountered the boggart, a very mysterious creature! This creature knows all of your deepest, darkest fears and transforms into the thing that you are most afraid of. \n                  There is a special spell that you must use in order to defeat the boggart. Let’s see if you can figure out what spell to use… \n                  </p>\n                  <div id=\"d-button-holder\">\n                    <button id=\"b-landing\" onClick={handleExitClick}>\n                         Exit Maze\n                    </button>\n                  </div>\n          </div>\n      </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}